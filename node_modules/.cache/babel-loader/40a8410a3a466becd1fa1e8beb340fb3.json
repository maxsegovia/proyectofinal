{"ast":null,"code":"/**\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createTouchBackend;\nexports.TouchBackend = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction getEventClientTouchOffset(e) {\n  if (e.targetTouches.length === 1) {\n    return getEventClientOffset(e.targetTouches[0]);\n  }\n}\n\nfunction getEventClientOffset(e) {\n  if (e.targetTouches) {\n    return getEventClientTouchOffset(e);\n  } else {\n    return {\n      x: e.clientX,\n      y: e.clientY\n    };\n  }\n} // Used for MouseEvent.buttons (note the s on the end).\n\n\nvar MouseButtons = {\n  Left: 1,\n  Right: 2,\n  Center: 4 // Used for e.button (note the lack of an s on the end).\n\n};\nvar MouseButton = {\n  Left: 0,\n  Center: 1,\n  Right: 2\n  /**\n   * Only touch events and mouse events where the left button is pressed should initiate a drag.\n   * @param {MouseEvent | TouchEvent} e The event\n   */\n\n};\n\nfunction eventShouldStartDrag(e) {\n  // For touch events, button will be undefined. If e.button is defined,\n  // then it should be MouseButton.Left.\n  return e.button === undefined || e.button === MouseButton.Left;\n}\n/**\n * Only touch events and mouse events where the left mouse button is no longer held should end a drag.\n * It's possible the user mouse downs with the left mouse button, then mouse down and ups with the right mouse button.\n * We don't want releasing the right mouse button to end the drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\n\n\nfunction eventShouldEndDrag(e) {\n  // Touch events will have buttons be undefined, while mouse events will have e.buttons's left button\n  // bit field unset if the left mouse button has been released\n  return e.buttons === undefined || (e.buttons & MouseButtons.Left) === 0;\n} // Polyfill for document.elementsFromPoint\n\n\nvar elementsFromPoint = (typeof document !== 'undefined' && document.elementsFromPoint || function (x, y) {\n  if (document.msElementsFromPoint) {\n    // msElementsFromPoint is much faster but returns a node-list, so convert it to an array\n    var msElements = document.msElementsFromPoint(x, y);\n    return msElements && Array.prototype.slice.call(msElements, 0);\n  }\n\n  var elements = [],\n      previousPointerEvents = [],\n      current,\n      i,\n      d; // get all elements via elementFromPoint, and remove them from hit-testing in order\n\n  while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current !== null) {\n    // push the element and its current style\n    elements.push(current);\n    previousPointerEvents.push({\n      value: current.style.getPropertyValue('pointer-events'),\n      priority: current.style.getPropertyPriority('pointer-events')\n    }); // add \"pointer-events: none\", to get to the underlying element\n\n    current.style.setProperty('pointer-events', 'none', 'important');\n  } // restore the previous pointer-events values\n\n\n  for (i = previousPointerEvents.length; d = previousPointerEvents[--i];) {\n    elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\n  } // return our results\n\n\n  return elements;\n}).bind(typeof document !== 'undefined' ? document : null);\n\nvar supportsPassive = function () {\n  // simular to jQuery's test\n  var supported = false;\n\n  try {\n    addEventListener('test', null, Object.defineProperty({}, 'passive', {\n      get: function get() {\n        supported = true;\n      }\n    }));\n  } catch (e) {}\n\n  return supported;\n}();\n\nvar ELEMENT_NODE = 1;\n\nfunction getNodeClientOffset(node) {\n  var el = node.nodeType === ELEMENT_NODE ? node : node.parentElement;\n\n  if (!el) {\n    return null;\n  }\n\n  var _el$getBoundingClient = el.getBoundingClientRect(),\n      top = _el$getBoundingClient.top,\n      left = _el$getBoundingClient.left;\n\n  return {\n    x: left,\n    y: top\n  };\n}\n\nvar eventNames = {\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    end: 'mouseup',\n    contextmenu: 'contextmenu'\n  },\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    end: 'touchend'\n  },\n  keyboard: {\n    keydown: 'keydown'\n  }\n};\n\nvar TouchBackend =\n/*#__PURE__*/\nfunction () {\n  function TouchBackend(manager) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TouchBackend);\n\n    options.delayTouchStart = options.delayTouchStart || options.delay;\n    options = _objectSpread({\n      enableTouchEvents: true,\n      enableMouseEvents: false,\n      enableKeyboardEvents: false,\n      ignoreContextMenu: false,\n      delayTouchStart: 0,\n      delayMouseStart: 0,\n      touchSlop: 0,\n      scrollAngleRanges: undefined\n    }, options);\n    this.actions = manager.getActions();\n    this.monitor = manager.getMonitor();\n    this.registry = manager.getRegistry();\n    this.enableKeyboardEvents = options.enableKeyboardEvents;\n    this.enableMouseEvents = options.enableMouseEvents;\n    this.delayTouchStart = options.delayTouchStart;\n    this.delayMouseStart = options.delayMouseStart;\n    this.ignoreContextMenu = options.ignoreContextMenu;\n    this.touchSlop = options.touchSlop;\n    this.scrollAngleRanges = options.scrollAngleRanges;\n    this.sourceNodes = {};\n    this.sourceNodeOptions = {};\n    this.sourcePreviewNodes = {};\n    this.sourcePreviewNodeOptions = {};\n    this.targetNodes = {};\n    this.targetNodeOptions = {};\n    this.listenerTypes = [];\n    this._mouseClientOffset = {};\n    this._isScrolling = false;\n\n    if (options.enableMouseEvents) {\n      this.listenerTypes.push('mouse');\n    }\n\n    if (options.enableTouchEvents) {\n      this.listenerTypes.push('touch');\n    }\n\n    if (options.enableKeyboardEvents) {\n      this.listenerTypes.push('keyboard');\n    }\n\n    if (options.getDropTargetElementsAtPoint) {\n      this.getDropTargetElementsAtPoint = options.getDropTargetElementsAtPoint;\n    }\n\n    this.getSourceClientOffset = this.getSourceClientOffset.bind(this);\n    this.handleTopMoveStart = this.handleTopMoveStart.bind(this);\n    this.handleTopMoveStartDelay = this.handleTopMoveStartDelay.bind(this);\n    this.handleTopMoveStartCapture = this.handleTopMoveStartCapture.bind(this);\n    this.handleTopMoveCapture = this.handleTopMoveCapture.bind(this);\n    this.handleTopMove = this.handleTopMove.bind(this);\n    this.handleTopMoveEndCapture = this.handleTopMoveEndCapture.bind(this);\n    this.handleCancelOnEscape = this.handleCancelOnEscape.bind(this);\n  }\n\n  _createClass(TouchBackend, [{\n    key: \"setup\",\n    value: function setup() {\n      if (typeof window === 'undefined') {\n        return;\n      }\n\n      (0, _invariant.default)(!this.constructor.isSetUp, 'Cannot have two Touch backends at the same time.');\n      this.constructor.isSetUp = true;\n      this.addEventListener(window, 'start', this.getTopMoveStartHandler());\n      this.addEventListener(window, 'start', this.handleTopMoveStartCapture, true);\n      this.addEventListener(window, 'move', this.handleTopMove);\n      this.addEventListener(window, 'move', this.handleTopMoveCapture, true);\n      this.addEventListener(window, 'end', this.handleTopMoveEndCapture, true);\n\n      if (this.enableMouseEvents && !this.ignoreContextMenu) {\n        this.addEventListener(window, 'contextmenu', this.handleTopMoveEndCapture);\n      }\n\n      if (this.enableKeyboardEvents) {\n        this.addEventListener(window, 'keydown', this.handleCancelOnEscape, true);\n      }\n    }\n  }, {\n    key: \"teardown\",\n    value: function teardown() {\n      if (typeof window === 'undefined') {\n        return;\n      }\n\n      this.constructor.isSetUp = false;\n      this._mouseClientOffset = {};\n      this.removeEventListener(window, 'start', this.handleTopMoveStartCapture, true);\n      this.removeEventListener(window, 'start', this.handleTopMoveStart);\n      this.removeEventListener(window, 'move', this.handleTopMoveCapture, true);\n      this.removeEventListener(window, 'move', this.handleTopMove);\n      this.removeEventListener(window, 'end', this.handleTopMoveEndCapture, true);\n\n      if (this.enableMouseEvents && !this.ignoreContextMenu) {\n        this.removeEventListener(window, 'contextmenu', this.handleTopMoveEndCapture);\n      }\n\n      if (this.enableKeyboardEvents) {\n        this.removeEventListener(window, 'keydown', this.handleCancelOnEscape, true);\n      }\n\n      this.uninstallSourceNodeRemovalObserver();\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(subject, event, handler, capture) {\n      var options = supportsPassive ? {\n        capture: capture,\n        passive: false\n      } : capture;\n      this.listenerTypes.forEach(function (listenerType) {\n        var evt = eventNames[listenerType][event];\n\n        if (evt) {\n          subject.addEventListener(evt, handler, options);\n        }\n      });\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(subject, event, handler, capture) {\n      var options = supportsPassive ? {\n        capture: capture,\n        passive: false\n      } : capture;\n      this.listenerTypes.forEach(function (listenerType) {\n        var evt = eventNames[listenerType][event];\n\n        if (evt) {\n          subject.removeEventListener(evt, handler, options);\n        }\n      });\n    }\n  }, {\n    key: \"connectDragSource\",\n    value: function connectDragSource(sourceId, node, options) {\n      var _this = this;\n\n      var handleMoveStart = this.handleMoveStart.bind(this, sourceId);\n      this.sourceNodes[sourceId] = node;\n      this.addEventListener(node, 'start', handleMoveStart);\n      return function () {\n        delete _this.sourceNodes[sourceId];\n\n        _this.removeEventListener(node, 'start', handleMoveStart);\n      };\n    }\n  }, {\n    key: \"connectDragPreview\",\n    value: function connectDragPreview(sourceId, node, options) {\n      var _this2 = this;\n\n      this.sourcePreviewNodeOptions[sourceId] = options;\n      this.sourcePreviewNodes[sourceId] = node;\n      return function () {\n        delete _this2.sourcePreviewNodes[sourceId];\n        delete _this2.sourcePreviewNodeOptions[sourceId];\n      };\n    }\n  }, {\n    key: \"connectDropTarget\",\n    value: function connectDropTarget(targetId, node) {\n      var _this3 = this;\n\n      var handleMove = function handleMove(e) {\n        var coords;\n\n        if (!_this3.monitor.isDragging()) {\n          return;\n        }\n        /**\n         * Grab the coordinates for the current mouse/touch position\n         */\n\n\n        switch (e.type) {\n          case eventNames.mouse.move:\n            coords = {\n              x: e.clientX,\n              y: e.clientY\n            };\n            break;\n\n          case eventNames.touch.move:\n            coords = {\n              x: e.touches[0].clientX,\n              y: e.touches[0].clientY\n            };\n            break;\n        }\n        /**\n         * Use the coordinates to grab the element the drag ended on.\n         * If the element is the same as the target node (or any of it's children) then we have hit a drop target and can handle the move.\n         */\n\n\n        var droppedOn = document.elementFromPoint(coords.x, coords.y);\n        var childMatch = node.contains(droppedOn);\n\n        if (droppedOn === node || childMatch) {\n          return _this3.handleMove(e, targetId);\n        }\n      };\n      /**\n       * Attaching the event listener to the body so that touchmove will work while dragging over multiple target elements.\n       */\n\n\n      this.addEventListener(document.querySelector('body'), 'move', handleMove);\n      this.targetNodes[targetId] = node;\n      return function () {\n        delete _this3.targetNodes[targetId];\n\n        _this3.removeEventListener(document.querySelector('body'), 'move', handleMove);\n      };\n    }\n  }, {\n    key: \"getSourceClientOffset\",\n    value: function getSourceClientOffset(sourceId) {\n      return getNodeClientOffset(this.sourceNodes[sourceId]);\n    }\n  }, {\n    key: \"handleTopMoveStartCapture\",\n    value: function handleTopMoveStartCapture(e) {\n      if (!eventShouldStartDrag(e)) {\n        return;\n      }\n\n      this.moveStartSourceIds = [];\n    }\n  }, {\n    key: \"handleMoveStart\",\n    value: function handleMoveStart(sourceId) {\n      // Just because we received an event doesn't necessarily mean we need to collect drag sources.\n      // We only collect start collecting drag sources on touch and left mouse events.\n      if (Array.isArray(this.moveStartSourceIds)) {\n        this.moveStartSourceIds.unshift(sourceId);\n      }\n    }\n  }, {\n    key: \"getTopMoveStartHandler\",\n    value: function getTopMoveStartHandler() {\n      if (!this.delayTouchStart && !this.delayMouseStart) {\n        return this.handleTopMoveStart;\n      }\n\n      return this.handleTopMoveStartDelay;\n    }\n  }, {\n    key: \"handleTopMoveStart\",\n    value: function handleTopMoveStart(e) {\n      if (!eventShouldStartDrag(e)) {\n        return;\n      } // Don't prematurely preventDefault() here since it might:\n      // 1. Mess up scrolling\n      // 2. Mess up long tap (which brings up context menu)\n      // 3. If there's an anchor link as a child, tap won't be triggered on link\n\n\n      var clientOffset = getEventClientOffset(e);\n\n      if (clientOffset) {\n        this._mouseClientOffset = clientOffset;\n      }\n\n      this.waitingForDelay = false;\n    }\n  }, {\n    key: \"handleTopMoveStartDelay\",\n    value: function handleTopMoveStartDelay(e) {\n      if (!eventShouldStartDrag(e)) {\n        return;\n      }\n\n      var delay = e.type === eventNames.touch.start ? this.delayTouchStart : this.delayMouseStart;\n      this.timeout = setTimeout(this.handleTopMoveStart.bind(this, e), delay);\n      this.waitingForDelay = true;\n    }\n  }, {\n    key: \"handleTopMoveCapture\",\n    value: function handleTopMoveCapture(e) {\n      this.dragOverTargetIds = [];\n    }\n  }, {\n    key: \"handleMove\",\n    value: function handleMove(e, targetId) {\n      this.dragOverTargetIds.unshift(targetId);\n    }\n  }, {\n    key: \"handleTopMove\",\n    value: function handleTopMove(e) {\n      var _this4 = this;\n\n      clearTimeout(this.timeout);\n\n      if (this.waitingForDelay) {\n        return;\n      }\n\n      var moveStartSourceIds = this.moveStartSourceIds,\n          dragOverTargetIds = this.dragOverTargetIds;\n      var clientOffset = getEventClientOffset(e);\n\n      if (!clientOffset) {\n        return;\n      } // If the touch move started as a scroll, or is is between the scroll angles\n\n\n      if (this._isScrolling || !this.monitor.isDragging() && inAngleRanges(this._mouseClientOffset.x, this._mouseClientOffset.y, clientOffset.x, clientOffset.y, this.scrollAngleRanges)) {\n        this._isScrolling = true;\n        return;\n      } // If we're not dragging and we've moved a little, that counts as a drag start\n\n\n      if (!this.monitor.isDragging() && this._mouseClientOffset.hasOwnProperty('x') && moveStartSourceIds && distance(this._mouseClientOffset.x, this._mouseClientOffset.y, clientOffset.x, clientOffset.y) > (this.touchSlop ? this.touchSlop : 0)) {\n        this.moveStartSourceIds = null;\n        this.actions.beginDrag(moveStartSourceIds, {\n          clientOffset: this._mouseClientOffset,\n          getSourceClientOffset: this.getSourceClientOffset,\n          publishSource: false\n        });\n      }\n\n      if (!this.monitor.isDragging()) {\n        return;\n      }\n\n      var sourceNode = this.sourceNodes[this.monitor.getSourceId()];\n      this.installSourceNodeRemovalObserver(sourceNode);\n      this.actions.publishDragSource();\n      e.preventDefault(); // Get the node elements of the hovered DropTargets\n\n      var dragOverTargetNodes = dragOverTargetIds.map(function (key) {\n        return _this4.targetNodes[key];\n      }); // Get the a ordered list of nodes that are touched by\n\n      var elementsAtPoint = this.getDropTargetElementsAtPoint ? this.getDropTargetElementsAtPoint(clientOffset.x, clientOffset.y, dragOverTargetNodes) : elementsFromPoint(clientOffset.x, clientOffset.y); // Extend list with parents that are not receiving elementsFromPoint events (size 0 elements and svg groups)\n\n      var elementsAtPointExtended = [];\n\n      for (var nodeId in elementsAtPoint) {\n        if (!elementsAtPoint.hasOwnProperty(nodeId)) {\n          continue;\n        }\n\n        var currentNode = elementsAtPoint[nodeId];\n        elementsAtPointExtended.push(currentNode);\n\n        while (currentNode) {\n          currentNode = currentNode.parentElement;\n\n          if (!elementsAtPointExtended.includes(currentNode)) {\n            elementsAtPointExtended.push(currentNode);\n          }\n        }\n      }\n\n      var orderedDragOverTargetIds = elementsAtPointExtended // Filter off nodes that arent a hovered DropTargets nodes\n      .filter(function (node) {\n        return dragOverTargetNodes.indexOf(node) > -1;\n      }) // Map back the nodes elements to targetIds\n      .map(function (node) {\n        for (var targetId in _this4.targetNodes) {\n          if (node === _this4.targetNodes[targetId]) {\n            return targetId;\n          }\n        }\n\n        return null;\n      }) // Filter off possible null rows\n      .filter(function (node) {\n        return !!node;\n      }).filter(function (id, index, ids) {\n        return ids.indexOf(id) === index;\n      }); // Reverse order because dnd-core reverse it before calling the DropTarget drop methods\n\n      orderedDragOverTargetIds.reverse();\n      this.actions.hover(orderedDragOverTargetIds, {\n        clientOffset: clientOffset\n      });\n    }\n  }, {\n    key: \"handleTopMoveEndCapture\",\n    value: function handleTopMoveEndCapture(e) {\n      this._isScrolling = false;\n\n      if (!eventShouldEndDrag(e)) {\n        return;\n      }\n\n      if (!this.monitor.isDragging() || this.monitor.didDrop()) {\n        this.moveStartSourceIds = null;\n        return;\n      }\n\n      e.preventDefault();\n      this._mouseClientOffset = {};\n      this.uninstallSourceNodeRemovalObserver();\n      this.actions.drop();\n      this.actions.endDrag();\n    }\n  }, {\n    key: \"handleCancelOnEscape\",\n    value: function handleCancelOnEscape(e) {\n      if (e.key === 'Escape' && this.monitor.isDragging()) {\n        this._mouseClientOffset = {};\n        this.uninstallSourceNodeRemovalObserver();\n        this.actions.endDrag();\n      }\n    }\n  }, {\n    key: \"handleOnContextMenu\",\n    value: function handleOnContextMenu() {\n      this.moveStartSourceIds = null;\n    }\n  }, {\n    key: \"installSourceNodeRemovalObserver\",\n    value: function installSourceNodeRemovalObserver(node) {\n      var _this5 = this;\n\n      this.uninstallSourceNodeRemovalObserver();\n      this.draggedSourceNode = node;\n      this.draggedSourceNodeRemovalObserver = new window.MutationObserver(function () {\n        if (!node.parentElement) {\n          _this5.resurrectSourceNode();\n\n          _this5.uninstallSourceNodeRemovalObserver();\n        }\n      });\n\n      if (!node || !node.parentElement) {\n        return;\n      }\n\n      this.draggedSourceNodeRemovalObserver.observe(node.parentElement, {\n        childList: true\n      });\n    }\n  }, {\n    key: \"resurrectSourceNode\",\n    value: function resurrectSourceNode() {\n      this.draggedSourceNode.style.display = 'none';\n      this.draggedSourceNode.removeAttribute('data-reactid');\n      document.body.appendChild(this.draggedSourceNode);\n    }\n  }, {\n    key: \"uninstallSourceNodeRemovalObserver\",\n    value: function uninstallSourceNodeRemovalObserver() {\n      if (this.draggedSourceNodeRemovalObserver) {\n        this.draggedSourceNodeRemovalObserver.disconnect();\n      }\n\n      this.draggedSourceNodeRemovalObserver = null;\n      this.draggedSourceNode = null;\n    }\n  }]);\n\n  return TouchBackend;\n}();\n\nexports.TouchBackend = TouchBackend;\n\nfunction createTouchBackend() {\n  var optionsOrManager = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var touchBackendFactory = function touchBackendFactory(manager) {\n    return new TouchBackend(manager, optionsOrManager);\n  };\n\n  if (optionsOrManager.getMonitor) {\n    return touchBackendFactory(optionsOrManager);\n  } else {\n    return touchBackendFactory;\n  }\n}\n\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(Math.abs(x2 - x1), 2) + Math.pow(Math.abs(y2 - y1), 2));\n}\n\nfunction inAngleRanges(x1, y1, x2, y2, angleRanges) {\n  if (angleRanges == null) {\n    return false;\n  }\n\n  var angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI + 180;\n\n  for (var i = 0; i < angleRanges.length; ++i) {\n    if ((angleRanges[i].start == null || angle >= angleRanges[i].start) && (angleRanges[i].end == null || angle <= angleRanges[i].end)) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}